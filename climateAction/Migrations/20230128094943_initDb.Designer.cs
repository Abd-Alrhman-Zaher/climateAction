// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using climateAction.data;

namespace climateAction.Migrations
{
    [DbContext(typeof(context))]
    [Migration("20230128094943_initDb")]
    partial class initDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("climateAction.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Directorate_Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Facility_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Governorate_Id")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Submitted")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("climateAction.data.Answers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Answers_Date_Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("Question_id")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("User_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("assessments_id")
                        .HasColumnType("int");

                    b.Property<bool>("flag")
                        .HasColumnType("bit");

                    b.Property<string>("question_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("climateAction.data.Assessments", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Compltion_Prct")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Form_Name_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Form_Name_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("domains_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("assessments");
                });

            modelBuilder.Entity("climateAction.data.Directorates", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Directorates_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Directorates_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("governorates_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("directorates");
                });

            modelBuilder.Entity("climateAction.data.Domains", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Domain_Name_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain_Name_EN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("domains");
                });

            modelBuilder.Entity("climateAction.data.Facilities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Facility_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facility_Name_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facility_Name_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("directorates_id")
                        .HasColumnType("int");

                    b.Property<int>("facility_Types_id")
                        .HasColumnType("int");

                    b.Property<int>("governorates_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("facilities");
                });

            modelBuilder.Entity("climateAction.data.FacilityGeneralInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Covid_waiting_area")
                        .HasColumnType("bit");

                    b.Property<bool>("Delivery_ward")
                        .HasColumnType("bit");

                    b.Property<string>("Electric_power")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Facility_id")
                        .HasColumnType("int");

                    b.Property<bool>("Inpatient_beds")
                        .HasColumnType("bit");

                    b.Property<bool>("Kitchen")
                        .HasColumnType("bit");

                    b.Property<bool>("Laboratory")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<bool>("Laundry")
                        .HasColumnType("bit");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Management_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Mortuary")
                        .HasColumnType("bit");

                    b.Property<int>("Number_Of_Doctors")
                        .HasColumnType("int");

                    b.Property<int>("Number_Of_Midwives")
                        .HasColumnType("int");

                    b.Property<int>("Number_Of_Nurses")
                        .HasColumnType("int");

                    b.Property<int>("Number_Of_beds")
                        .HasColumnType("int");

                    b.Property<int>("Number_Of_inpatients")
                        .HasColumnType("int");

                    b.Property<double>("Occupancy_Rate")
                        .HasColumnType("float");

                    b.Property<int>("Outpatients")
                        .HasColumnType("int");

                    b.Property<bool>("Oxygen")
                        .HasColumnType("bit");

                    b.Property<bool>("Showers")
                        .HasColumnType("bit");

                    b.Property<bool>("Surgical_ward")
                        .HasColumnType("bit");

                    b.Property<bool>("Toilets")
                        .HasColumnType("bit");

                    b.Property<int>("Total_Staff")
                        .HasColumnType("int");

                    b.Property<bool>("Triage_Area")
                        .HasColumnType("bit");

                    b.Property<string>("User_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ventilators")
                        .HasColumnType("bit");

                    b.Property<string>("Water_supply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("waiting_area")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("facilityGeneralInfos");
                });

            modelBuilder.Entity("climateAction.data.Facility_Type", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Facility_Type_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facility_Type_EN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("facility_Types");
                });

            modelBuilder.Entity("climateAction.data.Governorates", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Governorates_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Governorates_EN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("governorates");
                });

            modelBuilder.Entity("climateAction.data.Question", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Indicator_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indicator_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<string>("category_title_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category_title_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("domains_id")
                        .HasColumnType("int");

                    b.Property<string>("explanatoryNotes_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("explanatoryNotes_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("green_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("green_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("question_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("red_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("red_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("yellow_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("yellow_EN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("climateAction.data.QuestionCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("category_AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("domain_id")
                        .HasColumnType("int");

                    b.Property<string>("id_Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("question_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("questionCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("climateAction.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("climateAction.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("climateAction.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("climateAction.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
